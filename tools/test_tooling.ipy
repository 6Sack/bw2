import re
import sys
import base64

stage_list = []

def stage(s):
  global stage_list
  stage_list += [s+"\n"]

def printreg(id, extra=None):
  global stage_list
  stage_list += ["""console.log("{id} complete");
console.log("{id}-s0:", R.s0());
console.log("{id}-s1:", R.s1());
console.log("{id}-s2:", R.s2());
console.log("{id}-s3:", R.s3());
console.log("{id}-s4:", R.s4());
console.log("{id}-s5:", R.s5());
console.log("{id}-u1:", R.u1());
console.log("{id}-u2:", R.u2());
($$)();
  """.format(**{"id":id})]
  if extra != None:
    stage_list += ["""console.log("{extra}");
  ($$)();
    """.format(**{"extra":extra})]

def emit_stage(i):
  global stage_list
  if i >= len(stage_list):
    return """function(){console.log("STAGE CHAIN COMPLETE");}"""
  rv = """function() {
/* stage """+str(i)+""" */
""" + stage_list[i].strip()
  rv = rv.replace("$$", emit_stage(i+1))
  rvx = "\n".join(["  "*(i+1) + x for x in rv.splitlines()])
  rvx += """\n}"""
  rvx = rvx.strip()

  return rvx

def stage_register_entity(f):
  vname = "sreg_"+f.replace("/","_")
  mkbwvar(f, vname)
  stage("ivk(R.doent, [vname], $$)")
def mkbwvar(fname, varname, corrupt=False):
  !ln -s $$PWD/{fname} bwo/{varname}
  with open("vars.js","a") as ofile:
    f = open(fname,"r").read()
    if ord(f[0]) == 0x32:
        #signing entity. Drop the Key
        f = f[33:]
    else:
        #just drop the ronum
        f = f[1:]
    if corrupt:
      f2 = f[0:5] + chr((~ord(f[5]))&0xFF) + f[6:]
      f = f2
    h = ""
    for i in f:
        h += "%02x"% ord(i)
    h = "0x" + h
    ofile.write("var %s = " % varname)
    while len(h) > 0:
        ofile.write(" "*8 +  "\""+h[:64]+"\"")
        if len(h) >64:
            ofile.write("+\n")
            h = h[64:]
        else:
            ofile.write(";\n")
            h = ""

def getEntityVK(fname):
     op = !bw2 i {fname}
     for i in op:
         if "Type" in i:
          continue
         v = re.match(".*Entity ([^\s].*)", i)
         if v is not None:
             return v.groups(1)[0]

def stage_start_parallel():
  pass
def stage_parallel():
  pass
def stage_end_parallel():
  pass
  
enum = 1
def mkE(expired=False, dr=None):
  global enum
  fname = "bwo/e%d"%enum
  expiry = "24h" if not expired else "1s"
  drs = ""
  if dr is not None:
    for d in dr:
      drs += "-r '"+d+"' "
  !bw2 mke -o {fname} --expiry {expiry} {drs}
  vk = getEntityVK(fname)
  enum += 1
  return enum-1, vk, fname

def getChainHash(fname):
  op = !bw2 i {fname}
  for i in op:
    if "Type" in i:
     continue
    v = re.match(".*DChain ([^\s].*)", i)
    if v is not None:
        return v.groups(1)[0]

cnum = 1
def mkC(mvkF, adps, toF, suffix):
  global cnum
  mvk = getEntityVK(mvkF)
  toVK = getEntityVK(toF)
  uri = mvk +"/" + suffix
  fname = "bwo/c_%d" % cnum
  op = !bw2 bc -t {toVK} -x {adps} -u {uri} | grep "DChain" | cut -d" " -f 4
  op = op[0].strip()
  !mv .{op}.chain {fname}
  cnum += 1
  hash = getChainHash(fname)
  return cnum-1, hash, fname


def getDotHash(fname):
  op = !bw2 i {fname}
  for i in op:
      if "Type" in i:
        continue
      v = re.match(".*DOT ([^\s].*)", i)
      if v is not None:
          return v.groups(1)[0]

def getDotSrc(fname):
  op = !bw2 i {fname}
  for i in op:
      if "Type" in i:
        continue
      v = re.match(".*From: ([^\s].*)", i)
      if v is not None:
          return v.groups(1)[0]

def getDotDest(fname):
  op = !bw2 i {fname}
  for i in op:
      if "Type" in i:
        continue
      v = re.match(".*To: ([^\s].*)", i)
      if v is not None:
          return v.groups(1)[0]

def fakeVK():
  d = open("/dev/urandom").read(32)
  vk = base64.urlsafe_b64encode(d)
  return vk

def fakeDRs(n):
    return [fakeVK() for i in xrange(n)]

dnum = 1
def mkD(efile1, efile2, adps, mvkF, suffix, expired=False, ttl=200, dr=None):
  global dnum
  mvk = getEntityVK(mvkF)
  uri = mvk+"/"+suffix
  dfname = "bwo/d%d"%dnum
  vk2 = getEntityVK(efile2)
  expiry = "24h" if not expired else "1s"
  drs = ""
  if dr is not None:
    for d in dr:
      drs += "-r '"+d+"' "
  !bw2 mkd -f {efile1} -t {vk2} --ttl {ttl} -o {dfname} -x {adps} -e {expiry} -u {uri} {drs}
  dnum += 1
  return dnum-1, getDotHash(dfname), dfname

def write_stages():
  with open("gen.js","w") as o:
    o.write("""loadScript("framework.js");\n""")
    o.write("""loadScript("contract.com");\n""")
    o.write("""loadScript("vars.js");\n""")
    o.write("""/* AUTOGENERATED STAGES BEGIN */\n""")
    o.write("tests = " + emit_stage(0) + ";\n")
    o.write("""\n/* AUTOGENERATED STAGES END */\n""")
    o.write("tests();\n")
