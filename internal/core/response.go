// This file is part of BOSSWAVE.
//
// BOSSWAVE is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// BOSSWAVE is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with BOSSWAVE.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright Â© 2015 Michael Andersen <m.andersen@cs.berkeley.edu>

package core

import (
	"encoding/base64"
	"encoding/binary"

	"github.com/immesys/bw2/objects"
)

//These are messages that are not generated by the clients.
// -status from message
// -find/ls response
// they are not signed because they are "from" the router
// and the transport is secure. These terminate at the router
// so the client never sees this "framing".
// i.e c->A->B, this message would be from B to A. c only sees
// the contents of the message, not the frame.

const (
	BWStatusUnchecked      = 0
	BWStatusOkay           = 200
	BWStatusUnresolvable   = 401
	BWStatusInvalidDOT     = 402
	BWStatusInvalidSig     = 403
	BWStatusTTLExpired     = 404
	BWStatusBadPermissions = 405
	//In Anarchy we are assuming that all messages are delivered on a channel
	//that matches the origin VK of the messages. This indicates a mismatch
	//of that assumption
	BWStatusOriginVKMismatch = 406
	//Using an ALL dchain but no origin RO
	BWStatusNoOrigin = 407
	BWStatusBadURI   = 408
	//Returned if you try to publish to a wildcard
	BWStatusBadOperation     = 409
	BWStatusMVKMismatch      = 410
	BWStatusMalformedMessage = 411
	BWStatusAffinityMismatch = 412
	BWStatusPeerError        = 413
)

type UniqueMessageID struct {
	Mid uint64
	Sig uint64
}

func (umid *UniqueMessageID) ToString() string {
	tmp := make([]byte, 16)
	binary.LittleEndian.PutUint64(tmp, umid.Mid)
	binary.LittleEndian.PutUint64(tmp[8:], umid.Mid)
	return base64.URLEncoding.EncodeToString(tmp)
}

func UniqueMessageIDFromString(s string) *UniqueMessageID {
	tmp := make([]byte, 16)
	tmp, err := base64.URLEncoding.DecodeString(s)
	if err != nil {
		return nil
	}
	rv := &UniqueMessageID{}
	rv.Mid = binary.LittleEndian.Uint64(tmp)
	rv.Sig = binary.LittleEndian.Uint64(tmp[8:])
	return rv
}

type StatusMessage struct {
	UMid UniqueMessageID
	Code int
}
type ObjectResponse struct {
	UMid    UniqueMessageID
	Objects []objects.PayloadObject
}

func (s *StatusMessage) Ok() bool {
	return s.Code == BWStatusOkay
}
